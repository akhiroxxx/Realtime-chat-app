{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Akhilesh\\\\OneDrive\\\\Desktop\\\\MERN-CHAT-APP\\\\frontend\\\\src\\\\components\\\\SingleChat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport { Box, FormControl, IconButton, Input, Spinner, Text, useToast } from \"@chakra-ui/react\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport axios from \"axios\";\nimport \"./styles.css\";\nimport io from \"socket.io-client\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"lottie-react\";\nimport animationData from \"../animations/typing.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"http://localhost:5000\";\nvar socket, selectedChatCompare;\nconst SingleChat = _ref => {\n  _s();\n  let {\n    fetchAgain,\n    setFetchAgain\n  } = _ref;\n  const toast = useToast();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState();\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const {\n    user,\n    selectedChat,\n    setSelectedChat,\n    notification,\n    setNotification\n  } = ChatState();\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      setLoading(true);\n      const {\n        data\n      } = await axios.get(`/api/message/${selectedChat._id}`, config);\n      console.log(messages);\n      setMessages(data);\n      setLoading(false);\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\"\n      });\n    }\n  };\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n  }, []);\n  useEffect(() => {\n    fetchMessages();\n    selectedChatCompare = selectedChat;\n  }, [selectedChat]);\n  useEffect(() => {\n    socket.on(\"message recieved\", newMessageRecieved => {\n      if (!selectedChatCompare || selectedChatCompare._id !== newMessageRecieved.chat._id) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n  const sendMessage = async event => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop Typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`\n          }\n        };\n        setNewMessage(\"\");\n        const {\n          data\n        } = await axios.post(\"/api/message\", {\n          content: newMessage,\n          chatId: selectedChat._id\n        }, config);\n        console.log(data);\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to Load the Messages\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\"\n        });\n      }\n    }\n  };\n  const typingHandler = e => {\n    setNewMessage(e.target.value);\n\n    // Typing Indicator Logic\n    if (!socketConnected) return;\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: selectedChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: {\n          base: \"28px\",\n          md: \"30px\"\n        },\n        pb: 3,\n        px: 2,\n        w: \"100%\",\n        fontFamily: \"Work sans\",\n        display: \"flex\",\n        justifyContent: {\n          base: \"space-between\"\n        },\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          display: {\n            base: \"flex\",\n            md: \"none\"\n          },\n          icon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 21\n          }, this),\n          onClick: () => setSelectedChat(\"\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }, this), !selectedChat.isGroupChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [getSender(user, selectedChat.users), /*#__PURE__*/_jsxDEV(ProfileModal, {\n            user: getSenderFull(user, selectedChat.users)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [selectedChat.chatName.toUpperCase(), /*#__PURE__*/_jsxDEV(UpdateGroupChatModal, {\n            fetchAgain: fetchAgain,\n            setFetchAgain: setFetchAgain,\n            fetchMessages: fetchMessages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        flexDir: \"column\",\n        justifyContent: \"flex-end\",\n        p: 3,\n        bg: \"#E8E8E8\",\n        w: \"100%\",\n        h: \"100%\",\n        borderRadius: \"lg\",\n        overflowY: \"hidden\",\n        children: [loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n          size: \"xl\",\n          w: 20,\n          h: 20,\n          alignSelf: \"center\",\n          margin: \"auto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\",\n          children: /*#__PURE__*/_jsxDEV(ScrollableChat, {\n            messages: messages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          onKeyDown: sendMessage,\n          isRequired: true,\n          mt: 3,\n          children: [isTyping ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Typing...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 27\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(Input, {\n            variant: \"filled\",\n            bg: \"#E0E0E0\",\n            placeholder: \"Enter a message..\",\n            value: newMessage,\n            onChange: typingHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      h: \"100%\",\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"3xl\",\n        pb: 3,\n        fontFamily: \"Work sans\",\n        children: \"Click on a user to start chatting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(SingleChat, \"mpSRbQwNYJam6gevuXsJ3Rl7Yw8=\", false, function () {\n  return [useToast];\n});\n_c = SingleChat;\nexport default SingleChat;\nvar _c;\n$RefreshReg$(_c, \"SingleChat\");","map":{"version":3,"names":["React","useEffect","useState","ChatState","Box","FormControl","IconButton","Input","Spinner","Text","useToast","ArrowBackIcon","getSender","getSenderFull","ProfileModal","UpdateGroupChatModal","axios","io","ScrollableChat","Lottie","animationData","jsxDEV","_jsxDEV","Fragment","_Fragment","ENDPOINT","socket","selectedChatCompare","SingleChat","_ref","_s","fetchAgain","setFetchAgain","toast","messages","setMessages","loading","setLoading","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","isTyping","setIsTyping","user","selectedChat","setSelectedChat","notification","setNotification","fetchMessages","config","headers","Authorization","token","data","get","_id","console","log","emit","error","title","description","status","duration","isClosable","position","on","newMessageRecieved","chat","includes","sendMessage","event","key","post","content","chatId","typingHandler","e","target","value","lastTypingTime","Date","getTime","timerLength","setTimeout","timeNow","timeDiff","children","fontSize","base","md","pb","px","w","fontFamily","display","justifyContent","alignItems","icon","fileName","_jsxFileName","lineNumber","columnNumber","onClick","isGroupChat","users","chatName","toUpperCase","flexDir","p","bg","h","borderRadius","overflowY","size","alignSelf","margin","className","onKeyDown","isRequired","mt","variant","placeholder","onChange","_c","$RefreshReg$"],"sources":["C:/Users/Akhilesh/OneDrive/Desktop/MERN-CHAT-APP/frontend/src/components/SingleChat.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport {\r\n  Box,\r\n  FormControl,\r\n  IconButton,\r\n  Input,\r\n  Spinner,\r\n  Text,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport axios from \"axios\";\r\nimport \"./styles.css\";\r\nimport io from \"socket.io-client\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"lottie-react\";\r\nimport animationData from \"../animations/typing.json\";\r\nconst ENDPOINT = \"http://localhost:5000\";\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const toast = useToast();\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState();\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n\r\n  const { user, selectedChat, setSelectedChat, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      setLoading(true);\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      console.log(messages);\r\n      setMessages(data);\r\n      setLoading(false);\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare ||\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n  });\r\n\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop Typing\", selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat._id,\r\n          },\r\n          config\r\n        );\r\n        console.log(data);\r\n\r\n        socket.emit(\"new message\", data);\r\n\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to Load the Messages\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    // Typing Indicator Logic\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            display=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              display={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {!selectedChat.isGroupChat ? (\r\n              <>\r\n                {getSender(user, selectedChat.users)}\r\n                <ProfileModal user={getSenderFull(user, selectedChat.users)} />\r\n              </>\r\n            ) : (\r\n              <>\r\n                {selectedChat.chatName.toUpperCase()}\r\n                <UpdateGroupChatModal\r\n                  fetchAgain={fetchAgain}\r\n                  setFetchAgain={setFetchAgain}\r\n                  fetchMessages={fetchMessages}\r\n                />\r\n              </>\r\n            )}\r\n          </Text>\r\n          <Box\r\n            display=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"#E8E8E8\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n            <FormControl onKeyDown={sendMessage} isRequired mt={3}>\r\n              {isTyping ? <div>Typing...</div> : <></>}\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message..\"\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        <Box\r\n          display=\"flex\"\r\n          alignItems=\"center\"\r\n          justifyContent=\"center\"\r\n          h=\"100%\"\r\n        >\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}