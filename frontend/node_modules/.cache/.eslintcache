[{"C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\index.js":"1","C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\App.js":"2","C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\Pages\\Homepage.js":"3","C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\Pages\\ChatPage.js":"4","C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\components\\Authentication\\Login.js":"5","C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\components\\Authentication\\Signup.js":"6","C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\Context\\ChatProvider.js":"7","C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\components\\miscellaneous\\SideDrawer.js":"8","C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\components\\MyChats.js":"9","C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\components\\ChatBox.js":"10","C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\components\\miscellaneous\\ProfileModal.js":"11","C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\components\\ChatLoading.js":"12","C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\components\\UserAvatar\\UserListItem.js":"13","C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\config\\ChatLogics.js":"14","C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\components\\miscellaneous\\GroupChatModal.js":"15","C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\components\\UserAvatar\\UserBadgeItem.js":"16","C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\components\\SingleChat.js":"17","C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\components\\miscellaneous\\UpdateGroupChatModal.js":"18","C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\components\\ScrollableChat.js":"19"},{"size":455,"mtime":1687874767027,"results":"20","hashOfConfig":"21"},{"size":340,"mtime":1687631961858,"results":"22","hashOfConfig":"21"},{"size":1501,"mtime":1687791474637,"results":"23","hashOfConfig":"21"},{"size":854,"mtime":1687814589082,"results":"24","hashOfConfig":"21"},{"size":3276,"mtime":1687700771602,"results":"25","hashOfConfig":"21"},{"size":6046,"mtime":1687708064697,"results":"26","hashOfConfig":"21"},{"size":1051,"mtime":1687955165655,"results":"27","hashOfConfig":"21"},{"size":6500,"mtime":1687957175099,"results":"28","hashOfConfig":"21"},{"size":3139,"mtime":1687814629098,"results":"29","hashOfConfig":"21"},{"size":655,"mtime":1687814790383,"results":"30","hashOfConfig":"21"},{"size":2185,"mtime":1687794535786,"results":"31","hashOfConfig":"21"},{"size":634,"mtime":1687796744350,"results":"32","hashOfConfig":"21"},{"size":951,"mtime":1687797382238,"results":"33","hashOfConfig":"21"},{"size":1382,"mtime":1687958333300,"results":"34","hashOfConfig":"21"},{"size":5242,"mtime":1687874077493,"results":"35","hashOfConfig":"21"},{"size":537,"mtime":1687813369532,"results":"36","hashOfConfig":"21"},{"size":6922,"mtime":1687955545881,"results":"37","hashOfConfig":"21"},{"size":7442,"mtime":1687875354924,"results":"38","hashOfConfig":"21"},{"size":1654,"mtime":1687878229277,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"rzz2q0",{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"43"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"43"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"43"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"43"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\index.js",[],[],[],"C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\App.js",[],[],"C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\Pages\\Homepage.js",[],[],"C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\Pages\\ChatPage.js",[],[],"C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\components\\Authentication\\Login.js",["103"],[],"import {\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  InputGroup,\r\n  InputRightElement,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { VStack } from \"@chakra-ui/react\";\r\nimport { useState } from \"react\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst Login = () => {\r\n  const [show, setShow] = useState(false);\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [loading, setloading] = useState(false);\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n  const handleClick = () => setShow(!show);\r\n\r\n  const postDetails = (pics) => {};\r\n\r\n  const submitHandler = async () => {\r\n    setloading(true);\r\n    if (!email || !password) {\r\n      toast({\r\n        title: \"Please fill all the fields\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setloading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        header: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        \"/api/user/login\",\r\n        {\r\n          email,\r\n          password,\r\n        },\r\n        config\r\n      );\r\n      toast({\r\n        title: \"Login Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setloading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occurred\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setloading(false);\r\n    }\r\n  };\r\n  return (\r\n    <VStack spacing=\"5px\" color=\"black\">\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email</FormLabel>\r\n        <Input\r\n          placeholder=\"Enter Your Email\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup>\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n      >\r\n        Login\r\n      </Button>\r\n      <Button\r\n        variant=\"solid\"\r\n        colorScheme=\"red\"\r\n        width=\"100%\"\r\n        onClick={() => {\r\n          setEmail(\"guest@example.com\");\r\n          setPassword(\"123456\");\r\n        }}\r\n      >\r\n        Use Guest User Credentials\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\components\\Authentication\\Signup.js",[],[],"C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\Context\\ChatProvider.js",[],[],"C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\components\\miscellaneous\\SideDrawer.js",["104","105","106"],[],"import React, { useState } from \"react\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  Input,\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n  Spinner,\r\n  Tooltip,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport UserListItem from \"../UserAvatar/UserListItem\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { Button } from \"@chakra-ui/button\";\r\n// import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Avatar, AvatarBadge, AvatarGroup } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDisclosure } from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nconst SideDrawer = () => {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState();\r\n  const {\r\n    user,\r\n    setSelectedChat,\r\n    chats,\r\n    setChats,\r\n    notification,\r\n    setNotification,\r\n  } = ChatState();\r\n  const history = useHistory();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const toast = useToast();\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: \"Please Enter Something To Search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occurred!\",\r\n        description: \"Failed to load the search results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    try {\r\n      setLoadingChat(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\"/api/chat\", { userId }, config);\r\n\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Fetching The Chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        display=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        p=\"5px 10px 5px 10px\"\r\n        borderWidth=\"5px\"\r\n      >\r\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\r\n          <Button variant=\"ghost\" onClick={onOpen}>\r\n            <i class=\"fa-sharp fa-solid fa-magnifying-glass\" color=\"black\"></i>\r\n            <Text display={{ base: \"none\", md: \"flex\" }} px=\"4\">\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\r\n          Real-Time-Chat-App\r\n        </Text>\r\n        <div>\r\n          <Menu>\r\n            <MenuButton p={1}>\r\n              {/* <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              /> */}\r\n              <BellIcon fontSize=\"2xl\" />\r\n            </MenuButton>\r\n            <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => {\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notification.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>;\r\n              })}\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu>\r\n            <MenuButton as={Button} righticon={<ChevronDownIcon />}>\r\n              <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n                src={user.pic}\r\n              />\r\n            </MenuButton>\r\n            <MenuList>\r\n              {/* <MenuItem>My Profile</MenuItem> */}\r\n              <ProfileModal user={user}>\r\n                <MenuItem>My Profile</MenuItem>\r\n              </ProfileModal>\r\n              <MenuDivider></MenuDivider>\r\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n          <DrawerBody>\r\n            <Box display=\"flex\" pb={2}>\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={handleSearch}>Go</Button>\r\n            </Box>\r\n            {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => accessChat(user._id)}\r\n                />\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner ml=\"auto\" display=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SideDrawer;\r\n","C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\components\\MyChats.js",["107"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport { Box, Button, Stack, Text, useToast } from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { AddIcon } from \"@chakra-ui/icons\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\nconst MyChats = ({ fetchAgain }) => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    // console.log(user._id);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"/api/chat\", config);\r\n      console.log(data);\r\n      setChats(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n  }, [fetchAgain]);\r\n  return (\r\n    <Box\r\n      display={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        display=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        My Chats\r\n        <GroupChatModal>\r\n          <Button\r\n            display=\"flex\"\r\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n            rightIcon={<AddIcon />}\r\n          >\r\n            New Group Chat\r\n          </Button>\r\n        </GroupChatModal>\r\n      </Box>\r\n      <Box\r\n        display=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"#F8F8F8\"\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n      >\r\n        {chats ? (\r\n          <Stack overflowY=\"scroll\">\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\r\n                color={selectedChat === chat ? \"white\" : \"black\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                <Text>\r\n                  {!chat.isGroupChat\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\components\\ChatBox.js",[],[],"C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\components\\miscellaneous\\ProfileModal.js",[],[],"C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\components\\ChatLoading.js",[],[],"C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\components\\UserAvatar\\UserListItem.js",["108"],[],"import React from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport { Box } from \"@chakra-ui/react\";\r\nimport { Text } from \"@chakra-ui/react\";\r\nimport { Avatar } from \"@chakra-ui/react\";\r\nconst UserListItem = ({ user, handleFunction }) => {\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\config\\ChatLogics.js",[],[],"C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\components\\miscellaneous\\GroupChatModal.js",[],[],"C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\components\\UserAvatar\\UserBadgeItem.js",[],[],"C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\components\\SingleChat.js",["109","110","111","112"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport {\r\n  Box,\r\n  FormControl,\r\n  IconButton,\r\n  Input,\r\n  Spinner,\r\n  Text,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport axios from \"axios\";\r\nimport \"./styles.css\";\r\nimport io from \"socket.io-client\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"lottie-react\";\r\nimport animationData from \"../animations/typing.json\";\r\nconst ENDPOINT = \"http://localhost:5000\";\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const toast = useToast();\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState();\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n\r\n  const { user, selectedChat, setSelectedChat, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      setLoading(true);\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      console.log(messages);\r\n      setMessages(data);\r\n      setLoading(false);\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare ||\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n  });\r\n\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop Typing\", selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat._id,\r\n          },\r\n          config\r\n        );\r\n\r\n        socket.emit(\"new message\", data);\r\n\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to Load the Messages\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    // Typing Indicator Logic\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            display=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              display={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {!selectedChat.isGroupChat ? (\r\n              <>\r\n                {getSender(user, selectedChat.users)}\r\n                <ProfileModal user={getSenderFull(user, selectedChat.users)} />\r\n              </>\r\n            ) : (\r\n              <>\r\n                {selectedChat.chatName.toUpperCase()}\r\n                <UpdateGroupChatModal\r\n                  fetchAgain={fetchAgain}\r\n                  setFetchAgain={setFetchAgain}\r\n                  fetchMessages={fetchMessages}\r\n                />\r\n              </>\r\n            )}\r\n          </Text>\r\n          <Box\r\n            display=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"#E8E8E8\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n            <FormControl onKeyDown={sendMessage} isRequired mt={3}>\r\n              {isTyping ? <div>Typing...</div> : <></>}\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message..\"\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        <Box\r\n          display=\"flex\"\r\n          alignItems=\"center\"\r\n          justifyContent=\"center\"\r\n          h=\"100%\"\r\n        >\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\components\\miscellaneous\\UpdateGroupChatModal.js",[],[],"C:\\Users\\Akhilesh\\OneDrive\\Desktop\\MERN-CHAT-APP\\frontend\\src\\components\\ScrollableChat.js",[],[],{"ruleId":"113","severity":1,"message":"114","line":25,"column":9,"nodeType":"115","messageId":"116","endLine":25,"endColumn":20},{"ruleId":"113","severity":1,"message":"117","line":24,"column":18,"nodeType":"115","messageId":"116","endLine":24,"endColumn":29},{"ruleId":"113","severity":1,"message":"118","line":24,"column":31,"nodeType":"115","messageId":"116","endLine":24,"endColumn":42},{"ruleId":"119","severity":1,"message":"120","line":153,"column":41,"nodeType":"121","messageId":"122","endLine":153,"endColumn":43},{"ruleId":"123","severity":1,"message":"124","line":40,"column":6,"nodeType":"125","endLine":40,"endColumn":18,"suggestions":"126"},{"ruleId":"113","severity":1,"message":"127","line":2,"column":10,"nodeType":"115","messageId":"116","endLine":2,"endColumn":19},{"ruleId":"113","severity":1,"message":"128","line":20,"column":8,"nodeType":"115","messageId":"116","endLine":20,"endColumn":14},{"ruleId":"113","severity":1,"message":"129","line":21,"column":8,"nodeType":"115","messageId":"116","endLine":21,"endColumn":21},{"ruleId":"123","severity":1,"message":"130","line":72,"column":6,"nodeType":"125","endLine":72,"endColumn":8,"suggestions":"131"},{"ruleId":"123","severity":1,"message":"132","line":78,"column":6,"nodeType":"125","endLine":78,"endColumn":20,"suggestions":"133"},"no-unused-vars","'postDetails' is assigned a value but never used.","Identifier","unusedVar","'AvatarBadge' is defined but never used.","'AvatarGroup' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchChats'. Either include it or remove the dependency array.","ArrayExpression",["134"],"'ChatState' is defined but never used.","'Lottie' is defined but never used.","'animationData' is defined but never used.","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["135"],"React Hook useEffect has a missing dependency: 'fetchMessages'. Either include it or remove the dependency array.",["136"],{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},"Update the dependencies array to be: [fetchAgain, fetchChats]",{"range":"143","text":"144"},"Update the dependencies array to be: [user]",{"range":"145","text":"146"},"Update the dependencies array to be: [fetchMessages, selectedChat]",{"range":"147","text":"148"},[1285,1297],"[fetchAgain, fetchChats]",[2272,2274],"[user]",[2371,2385],"[fetchMessages, selectedChat]"]